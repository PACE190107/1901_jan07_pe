drop table account;
drop table account_info;
drop sequence USER_ID_SEQ;
drop sequence BANK_ACCOUNT_ID_SEQ;

  CREATE TABLE ACCOUNT
(
  A_ID NUMBER NOT NULL,
  A_FIRSTNAME VARCHAR2(20) NOT NULL,
  A_LASTNAME VARCHAR2(20) NOT NULL,
  A_USERNAME VARCHAR2(20) NOT NULL,
  A_PASSWORD VARCHAR2(100) NOT NULL,
  CONSTRAINT PK_ACCOUNT PRIMARY KEY (A_ID),
  CONSTRAINT UNIQUE_USERNAME UNIQUE (A_USERNAME)
);  

    CREATE TABLE ACCOUNT_INFO
(
    A_ID NUMBER NOT NULL,
    BANK_ACCOUNT_ID NUMBER NOT NULL,
    A_BALANCE NUMBER,
    CONSTRAINT KK_ACCOUNT PRIMARY KEY (A_ID)
);
--SEQUENCE USED FOR AUTOINCREMENT  
CREATE SEQUENCE USER_ID_SEQ
  START WITH 1
  INCREMENT BY 1;

CREATE SEQUENCE BANK_ACCOUNT_ID_SEQ
    START WITH 100000000
    INCREMENT BY 1;
  
  --HASHING FUNCTION THAT COMBINES USERNAME, PASSWORD AND A SPECIAL WORD  
CREATE OR REPLACE FUNCTION GET_ACCOUNT_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/


--TRIGGER THAT GETS NEXT SEQUENCE VALUE FOR ID AND HASHES BLANK PASSWORD
CREATE OR REPLACE TRIGGER ACCOUNT_B_INSERT
BEFORE INSERT
ON ACCOUNT
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  IF :NEW.A_ID IS NULL THEN
    SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.A_ID FROM DUAL;
  END IF;
  
  /* SAVE HASH INSTEAD OF PASSWORD */
  --SELECT GET_ACCOUNT_HASH(:NEW.A_USERNAME,:NEW.A_PASSWORD) INTO :NEW.A_PASSWORD FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ACCOUNT_C_INSERT
BEFORE INSERT
ON ACCOUNT_INFO
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  IF :NEW.BANK_ACCOUNT_ID IS NULL THEN
    SELECT BANK_ACCOUNT_ID_SEQ.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
  END IF;
  
  IF :NEW.A_ID IS NULL THEN
    SELECT USER_ID_SEQ.CURRVAL INTO :NEW.A_ID FROM DUAL;
  END IF;

END;
/

--STORED PROCEDURE TO INSERT CUSTOMER
CREATE OR REPLACE PROCEDURE INSERT_ACCOUNT(
FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2, USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2,FIRSTDEPOSIT IN NUMBER, RESULTCOUNT OUT NUMBER)
AS
    beforeCount number;
    afterCount number;
BEGIN
    select count(*) into beforeCount from ACCOUNT;
  INSERT INTO ACCOUNT VALUES(NULL, FIRSTNAME, LASTNAME, USERNAME, PASSWORD);
  INSERT INTO ACCOUNT_INFO VALUES(NULL, NULL, FIRSTDEPOSIT);
  COMMIT;
  select count(*) into afterCount from ACCOUNT;
    resultCount:= afterCount - beforeCount;
END;
/

CREATE OR REPLACE PROCEDURE DEPOSIT_WITHDRAW(
AMOUNT IN NUMBER, USER_IDI IN VARCHAR2, RESULT_AMOUNT OUT NUMBER)
AS
    beforeCount Number;
    afterCount Number;
BEGIN 
    select count(*) into beforeCount FROM ACCOUNT_INFO;
    update ACCOUNT_INFO set A_BALANCE = AMOUNT where A_ID = USER_IDI;
    COMMIT;
    select count(*) into afterCount from ACCOUNT_INFO;
    RESULT_AMOUNT := afterCount - beforeCount;

END;
/

CREATE OR REPLACE PROCEDURE MODIFY_ACCOUNT_FIRSTNAME(
AMOUNT IN VARCHAR2, USER_IDI IN VARCHAR2)
AS
    
BEGIN 
    update ACCOUNT set A_FIRSTNAME = AMOUNT where A_ID = USER_IDI;
    COMMIT;

END;
/

CREATE OR REPLACE PROCEDURE MODIFY_ACCOUNT_LASTNAME(
AMOUNT IN VARCHAR2, USER_IDI IN VARCHAR2)
AS
    
BEGIN 
    update ACCOUNT set A_LASTNAME = AMOUNT where A_ID = USER_IDI;
    COMMIT;

END;
/

CREATE OR REPLACE PROCEDURE MODIFY_ACCOUNT_USERNAME(
AMOUNT IN VARCHAR2, USER_IDI IN VARCHAR2)
AS
    
BEGIN 
    update ACCOUNT set A_USERNAME = AMOUNT where A_ID = USER_IDI;
    COMMIT;

END;
/

CREATE OR REPLACE PROCEDURE MODIFY_ACCOUNT_PASSWORD(
AMOUNT IN VARCHAR2, USER_IDI IN VARCHAR2)
AS
    
BEGIN 
    update ACCOUNT set A_PASSWORD = AMOUNT where A_ID = USER_IDI;
    COMMIT;

END;
/

CREATE OR REPLACE PROCEDURE MODIFY_ACCOUNT_BALANCE(
AMOUNT IN NUMBER, USER_IDI IN VARCHAR2)
AS
    
BEGIN 
    update ACCOUNT_INFO set A_BALANCE = AMOUNT where A_ID = USER_IDI;
    COMMIT;

END;
/


CREATE OR REPLACE PROCEDURE DELETE_USER(
USER_IDI IN NUMBER, RESULT_AMOUNT OUT NUMBER)
AS
    beforeCount Number;
    afterCount Number;
BEGIN 
    select count(*) into beforeCount FROM ACCOUNT_INFO;
    delete from account where A_ID = USER_IDI;
    delete from account_info where A_ID = USER_IDI;
    COMMIT;
    select count(*) into afterCount from ACCOUNT_INFO;
    RESULT_AMOUNT := afterCount - beforeCount;

END;
/


SELECT * FROM ACCOUNT;
SELECT * FROM ACCOUNT_INFO;

select A_PASSWORD from Account where A_USERNAME like 'lsantibanez7%';