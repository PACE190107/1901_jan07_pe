-------------------------------------------------------------------------------
-- TABLES
-------------------------------------------------------------------------------
CREATE TABLE USER_ACCOUNT
(
    U_ID NUMBER NOT NULL,
    U_USERNAME VARCHAR2(50) NOT NULL,
    U_PASSWORD VARCHAR2(50) NOT NULL,
    U_IS_SUPER CHAR(1) NOT NULL,
    CONSTRAINT PK_U_ID PRIMARY KEY (U_ID),
    CONSTRAINT UNQ_U_USERNAME UNIQUE (U_USERNAME)
);

CREATE TABLE BANK_ACCOUNT
(
    U_ID NUMBER NOT NULL,
    B_ID NUMBER NOT NULL,
    B_NAME VARCHAR2(50) NOT NULL,
    B_TYPE VARCHAR2(50) NOT NULL,
    B_BALANCE NUMBER NOT NULL,
    CONSTRAINT FK_U_ID FOREIGN KEY (U_ID) REFERENCES USER_ACCOUNT(U_ID),
    CONSTRAINT UNQ_B_ID UNIQUE (B_ID)
);

-------------------------------------------------------------------------------
-- USEFUL STATEMENTS
-------------------------------------------------------------------------------

SELECT * FROM USER_ACCOUNT;
SELECT * FROM BANK_ACCOUNT;

--DROP TABLE CUSTOMER;
--DROP TABLE BANK_ACCOUNT;

EXEC DELETE_ALL_BANK_ACCOUNT;
EXEC DELETE_ALL_USER_ACCOUNT;

INSERT INTO user_account VALUES(0, 'admin', 'admin', '1');
CREATE USER admin IDENTIFIED BY admin;
GRANT DBA TO admin WITH ADMIN OPTION;

COMMIT;

-------------------------------------------------------------------------------
-- SEQUENCERS
-------------------------------------------------------------------------------
 
CREATE SEQUENCE USER_ACCOUNT_SEQ
    START WITH 1
    INCREMENT BY 1;
    
CREATE SEQUENCE BANK_ACCOUNT_SEQ
    START WITH 1
    INCREMENT BY 1;
    
-------------------------------------------------------------------------------
-- STORED PROCEDURES
-------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERT_USER_ACCOUNT(
U_ACCOUNT_USERNAME VARCHAR2, U_ACCOUNT_PASSWORD VARCHAR2, U_IS_SUPER CHAR, OUTINT OUT INTEGER)
AS
BEGIN
  INSERT INTO USER_ACCOUNT VALUES(NULL, U_ACCOUNT_USERNAME, U_ACCOUNT_PASSWORD, U_IS_SUPER);
  OUTINT := SQL%ROWCOUNT;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_BANK_ACCOUNT(
U_ACCOUNT_ID NUMBER, B_ACCOUNT_NAME VARCHAR2, B_ACCOUNT_TYPE VARCHAR2, B_ACCOUNT_BALANCE NUMBER, OUTINT OUT INTEGER)
AS
BEGIN
  INSERT INTO BANK_ACCOUNT VALUES(U_ACCOUNT_ID, NULL, B_ACCOUNT_NAME, B_ACCOUNT_TYPE, B_ACCOUNT_BALANCE);
  OUTINT := SQL%ROWCOUNT;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ALL_USER_ACCOUNT
AS
BEGIN
    DELETE FROM (SELECT * FROM USER_ACCOUNT);
end;
/

CREATE OR REPLACE PROCEDURE DELETE_ALL_BANK_ACCOUNT
AS
BEGIN
    DELETE FROM (SELECT * FROM BANK_ACCOUNT);
end;
/
    
-------------------------------------------------------------------------------
-- TRIGGERS
-------------------------------------------------------------------------------
    
CREATE OR REPLACE TRIGGER USER_ACCOUNT_B_INSERT
BEFORE INSERT ON USER_ACCOUNT FOR EACH ROW
BEGIN
  -- INCREASE THE SEQUENCE
  IF :NEW.U_ID IS NULL THEN
    SELECT USER_ACCOUNT_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BANK_ACCOUNT_B_INSERT
BEFORE INSERT ON BANK_ACCOUNT FOR EACH ROW
BEGIN
  -- INCREASE THE SEQUENCE
  IF :NEW.B_ID IS NULL THEN
    SELECT BANK_ACCOUNT_SEQ.NEXTVAL INTO :NEW.B_ID FROM DUAL;
  END IF;
END;
/

-------------------------------------------------------------------------------
-- SYNONYMS
-------------------------------------------------------------------------------

CREATE OR REPLACE PUBLIC SYNONYM USER_ACCOUNT FOR admin.USER_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM BANK_ACCOUNT FOR admin.BANK_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM USER_ACCOUNT_SEQ FOR admin.USER_ACCOUNT_SEQ;
CREATE OR REPLACE PUBLIC SYNONYM BANK_ACCOUNT_SEQ FOR admin.BANK_ACCOUNT_SEQ;
CREATE OR REPLACE PUBLIC SYNONYM INSERT_USER_ACCOUNT FOR admin.INSERT_USER_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM INSERT_BANK_ACCOUNT FOR admin.INSERT_BANK_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM DELETE_ALL_USER_ACCOUNT FOR admin.DELETE_ALL_USER_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM DELETE_ALL_BANK_ACCOUNT FOR admin.DELETE_ALL_BANK_ACCOUNT;
CREATE OR REPLACE PUBLIC SYNONYM USER_ACCOUNT_B_INSERT FOR admin.USER_ACCOUNT_B_INSERT;
CREATE OR REPLACE PUBLIC SYNONYM BANK_ACCOUNT_B_INSERT FOR admin.BANK_ACCOUNT_B_INSERT;