CREATE TABLE users (
U_ID number not null,
U_FIRST VARCHAR(50),
U_LAST VARCHAR(50),
U_USERNAME VARCHAR(50),
U_PASSWORD VARCHAR(50),
constraint U_ID_pk primary key(U_ID),
CONSTRAINT UNQ_USERNAME UNIQUE (U_USERNAME)
);

CREATE SEQUENCE USER_SEQ
  START WITH 1
  INCREMENT BY 1;
  
CREATE OR REPLACE FUNCTION GET_USER_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/


CREATE OR REPLACE TRIGGER USER_B_INSERT
BEFORE INSERT
ON USERS
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  IF :NEW.U_ID IS NULL THEN
    SELECT USER_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
  END IF;
  
  /* SAVE HASH INSTEAD OF PASSWORD */
  SELECT GET_USER_HASH(:NEW.U_USERNAME,:NEW.U_PASSWORD) INTO :NEW.U_PASSWORD FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_USER(
FIRSTNAME VARCHAR2, LASTNAME VARCHAR2, USERNAME VARCHAR2, PASSWORD VARCHAR2)
AS
BEGIN
  INSERT INTO USERS VALUES(NULL, FIRSTNAME, LASTNAME, USERNAME, PASSWORD);
  COMMIT;
END;
/

CREATE TABLE ACCOUNT(
A_ID number not null,
A_TYPE VARCHAR2(20),
A_AMOUNT number(30),
A_UID number,
CONSTRAINT A_ID_PK PRIMARY KEY (A_ID),
CONSTRAINT U_ID_FK FOREIGN KEY (A_UID) 
REFERENCES USERS(U_ID)
);

CREATE SEQUENCE ACCOUNT_SEQ
  START WITH 1
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ACCOUNT_B_INSERT
BEFORE INSERT
ON ACCOUNT
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  IF :NEW.A_ID IS NULL THEN
    SELECT ACCOUNT_SEQ.NEXTVAL INTO :NEW.A_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_ACCOUNT(
TYPE VARCHAR2, AMOUNT NUMBER, USERID number)
AS
BEGIN
  INSERT INTO ACCOUNT VALUES(NULL, TYPE, AMOUNT, USERID);
  COMMIT;
END;
/

exec INSERT_ACCOUNT('savings',1000,1);

select * from users;

select * from users where U_PASSWORD = GET_USER_HASH('JB','Jovi');
select * from account;
delete from USERS;

exec INSERT_USER('John', 'BonJovi','JB1','Jovi');

commit;
