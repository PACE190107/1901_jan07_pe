create or replace PROCEDURE DEPOSIT 

(
  P_USER_ID IN NUMBER 
, P_DEPOSIT_AMOUNT IN NUMBER 
) AS
BEGIN
    
IF P_DEPOSIT_AMOUNT < 0 THEN
    DBMS_OUTPUT.PUT_LINE('The amount entered cannot be negative');
ELSE
    UPDATE ACCOUNTS
    SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + P_DEPOSIT_AMOUNT
    WHERE USER_ID = P_USER_ID;
       DBMS_OUTPUT.PUT_LINE('Funds have been deposited successfully');
END IF;
END DEPOSIT;
-----------------------------------------------
CREATE OR REPLACE PROCEDURE DELETE_USER 
(
  P_USERNAME IN VARCHAR2 
) AS 
BEGIN
DELETE USERS WHERE USERNAME = P_USERNAME; 

END DELETE_USER;
----------------------------------------------------

create or replace PROCEDURE DELETE_ACCOUNT 
(
  
 P_USER_ID IN NUMBER 
)AS
    CURRENT_BALANCE NUMBER;

BEGIN

    SELECT ACCOUNT_BALANCE
    INTO CURRENT_BALANCE
    FROM ACCOUNTS
    WHERE USER_ID = P_USER_ID;
    
IF CURRENT_BALANCE = 0 THEN
    DELETE FROM ACCOUNTS WHERE  USER_ID = P_USER_ID;
END IF;
  
END DELETE_ACCOUNT;
---------------------------------------------------

create or replace PROCEDURE CREATE_ACCOUNT 
(
  P_ACCCOUNT_BALANCE IN NUMBER 
, P_ACCOUNT_NUMBER IN NUMBER 
, P_FIRST_NAME IN VARCHAR2 
, P_LAST_NAME IN VARCHAR2 
) AS USERIDX VARCHAR2(12);
BEGIN
  SELECT USER_ID INTO USERIDX FROM USERS WHERE LAST_NAME = P_LAST_NAME AND FIRST_NAME = P_FIRST_NAME;
  
  INSERT INTO ACCOUNTS (ACCOUNT_BALANCE, BANK_ACCOUNT_ID, ACCOUNT_NUMBER, USER_ID)  
  VALUES (P_ACCCOUNT_BALANCE, ACCOUNT_ID_SEQ.NEXTVAL, P_ACCOUNT_NUMBER, USERIDX);
END CREATE_ACCOUNT;

------------------------------------------------------
create or replace PROCEDURE WITHDRAW 
(
  P_USER_ID IN VARCHAR
, P_WITHDRAW_AMOUNT IN NUMBER 
) AS CURRENT_BALANCE NUMBER;
BEGIN
    SELECT P_WITHDRAW_AMOUNT
    INTO CURRENT_BALANCE
    FROM ACCOUNTS
    WHERE USER_ID = P_USER_ID;

IF CURRENT_BALANCE < P_WITHDRAW_AMOUNT THEN
    DBMS_OUTPUT.PUT_LINE('The amount entered is more than your account balance');
ELSE
    UPDATE ACCOUNTS
    SET ACCOUNT_BALANCE = ACCOUNT_BALANCE - P_WITHDRAW_AMOUNT
    WHERE USER_ID = P_USER_ID;
    DBMS_OUTPUT.PUT_LINE('Funds have been withdrawn successfully');
END IF;
END WITHDRAW;
--------------------------------------------------------

create or replace PROCEDURE UPDATE_USER 
(
  P_USER_ID IN VARCHAR2 
, P_FIRST_NAME IN VARCHAR2 
, P_LAST_NAME IN VARCHAR2 
) AS 
BEGIN
    IF P_FIRST_NAME IS NOT NULL THEN 
    UPDATE USERS SET FIRST_NAME = P_FIRST_NAME WHERE USER_ID = P_USER_ID;
    END IF;
    
    IF P_LAST_NAME IS NOT NULL THEN 
    UPDATE USERS SET LAST_NAME = P_LAST_NAME WHERE USER_ID = P_USER_ID;
    END IF;
END UPDATE_USER;


------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CHECK_BALANCE 
(
  P_ACCOUNT_BALANCE OUT NUMBER 
, P_USER_ID IN VARCHAR2 
) AS BALANCE_CHECK NUMBER;

BEGIN

SELECT ACCOUNT_BALANCE INTO BALANCE_CHECK FROM ACCOUNTS WHERE USER_ID = P_USER_ID;
 P_ACCOUNT_BALANCE := BALANCE_CHECK;
  
END CHECK_BALANCE;
----------------------------------------------------------

   CREATE SEQUENCE  "RODRIGUEZMARIA"."ACCOUNT_ID_SEQ"  MINVALUE 1 MAXVALUE 100 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
----------------------------------------------------------

   CREATE SEQUENCE  "RODRIGUEZMARIA"."USER_ID_SEQ"  MINVALUE 1 MAXVALUE 100 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE ;
-----------------------------------------------------------


  CREATE TABLE "RODRIGUEZMARIA"."ACCOUNTS" 
   (	"ACCOUNT_BALANCE" NUMBER(6,2), 
	"BANK_ACCOUNT_ID" VARCHAR2(12 BYTE), 
	"ACCOUNT_NUMBER" NUMBER(10,0), 
	"USER_ID" VARCHAR2(12 BYTE), 
	 PRIMARY KEY ("BANK_ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "ACCTNUM" UNIQUE ("ACCOUNT_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "FK_USER" FOREIGN KEY ("USER_ID")
	  REFERENCES "RODRIGUEZMARIA"."USERS" ("USER_ID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
-------------------------------------------------------------------------

  CREATE TABLE "RODRIGUEZMARIA"."USERS" 
   (	"USER_ID" VARCHAR2(12 BYTE), 
	"PASSWORD" VARCHAR2(8 BYTE), 
	"USERNAME" VARCHAR2(12 BYTE), 
	"FIRST_NAME" VARCHAR2(50 BYTE), 
	"LAST_NAME" VARCHAR2(50 BYTE), 
	"SUPERUSER" VARCHAR2(1 BYTE), 
	 PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
-------------------------------------------------------------------------