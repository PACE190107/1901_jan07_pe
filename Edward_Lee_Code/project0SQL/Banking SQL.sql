--BANK USERS
CREATE TABLE BANKING_CUSTOMER(
    CUSTOMER_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(20),
    USER_NAME VARCHAR2(20) unique not null, -- USED FOR LOGGING IN
    USER_PASSWORD VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(70),
    IS_ADMIN CHAR(1) --STILL NEEDS TO BE ADDED
    );
SELECT * FROM BANKING_CUSTOMER;
DROP TABLE BANKING_CUSTOMER;
DESCRIBE BANKING_CUSTOMER;
INSERT INTO BANKING_CUSTOMER VALUES(CUSTOMER_ID_SEQUENCE.NEXTVAL, 'Bojack', 'Horseman', 'BJhorseman', 'BJhorseman@GMAIL.COM', 'Secretariet', 'Y');

--BANK ACCOUNTS
CREATE TABLE BANKING_ACCOUNT(
    ACCOUNT_ID NUMBER PRIMARY KEY,
    BALANCE NUMBER(10,2),
    INTEREST_RATE NUMBER(4,2)
    );
SELECT * FROM BANKING_ACCOUNT;
Describe BANKING_ACCOUNT;
DROP TABLE BANKING_ACCOUNT;

--CROSS TABLE
CREATE TABLE CUSTOMER_ACCOUNT( --ALLOWS FOR SHARED BANK ACCOUNTS
--    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
    ACCOUNT_ID NUMBER REFERENCES BANKING_ACCOUNT(ACCOUNT_ID) ON DELETE CASCADE, --FK NOT CURRENT
    CUSTOMER_ID NUMBER REFERENCES BANKING_CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE, --FK NOT CURRENT
    ACCOUNT_NAME VARCHAR2(10) NOT NULL
    );
DESCRIBE CUSTOMER_ACCOUNT;
DROP TABLE CUSTOMER_ACCOUNT;

--SEQUENCES
    --USER ID SEQUENCE
CREATE SEQUENCE CUSTOMER_ID_SEQUENCE
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 10;
drop sequence CUSTOMER_ID_SEQUENCE;

    --ACCOUNT ID SEQUENCE
CREATE SEQUENCE ACCOUNT_ID_SEQUENCE
    MINVALUE 100
    START WITH 100
    INCREMENT BY 1
    CACHE 10;
DROP SEQUENCE ACCOUNT_ID_SEQUENCE;

--STORED PROCEDURES
    --NEW USER
CREATE OR REPLACE PROCEDURE NEW_CUSTOMER(
    USERNAME in VARCHAR2, PASSWORD in VARCHAR2, FIRSTNAME in VARCHAR2, LASTNAME in VARCHAR2, EMAIL in VARCHAR2, NEWUSER out sys_refcursor)
IS USERID NUMBER := CUSTOMER_ID_SEQUENCE.NEXTVAL;
BEGIN
    INSERT INTO BANKING_CUSTOMER VALUES(USERID, FIRSTNAME, LASTNAME, USERNAME, EMAIL, PASSWORD, 'N');
    OPEN NEWUSER FOR SELECT
    * FROM BANKING_CUSTOMER
    WHERE USERID = BANKING_CUSTOMER.CUSTOMER_ID;
END;
/
SELECT * FROM BANKING_CUSTOMER;
    --NEW ACCOUNT
CREATE OR REPLACE PROCEDURE NEW_ACCOUNT(
    USERNAME IN VARCHAR2, ACCOUNTNAME IN VARCHAR2, NEWACCOUNT OUT SYS_REFCURSOR)
IS
EXTRA NUMBER := ACCOUNT_ID_SEQUENCE.NEXTVAL;
BEGIN
    INSERT INTO BANKING_ACCOUNT VALUES( EXTRA, 0, .014 );
    INSERT INTO CUSTOMER_ACCOUNT VALUES(EXTRA, (SELECT CUSTOMER_ID FROM BANKING_CUSTOMER WHERE USER_NAME = USERNAME),ACCOUNTNAME );
    OPEN NEWACCOUNT FOR SELECT
    CUSTOMER_ACCOUNT.ACCOUNT_ID, ACCOUNT_NAME, BALANCE, BANKING_ACCOUNT.INTEREST_RATE
    FROM CUSTOMER_ACCOUNT RIGHT OUTER JOIN BANKING_ACCOUNT ON CUSTOMER_ACCOUNT.ACCOUNT_ID = BANKING_ACCOUNT.ACCOUNT_ID
    WHERE CUSTOMER_ACCOUNT.ACCOUNT_ID = EXTRA;
END;
/

SELECT * FROM CUSTOMER_ACCOUNT;
    --DELETE USER
CREATE OR REPLACE PROCEDURE DELETE_USER(USERID NUMBER)
AS
BEGIN
    FOR ACCTID IN(SELECT ACCOUNT_ID FROM CUSTOMER_ACCOUNT WHERE USERID = CUSTOMER_ID) LOOP
        DELETE_ACCOUNT(ACCTID.ACCOUNT_ID);
    END LOOP;
    DELETE FROM BANKING_CUSTOMER WHERE CUSTOMER_ID = USERID;
END;
/
CREATE OR REPLACE PROCEDURE DELETE_BY_USERNAME(USERNAME VARCHAR2)
AS
BEGIN
    FOR USERID IN(SELECT CUSTOMER_ID FROM BANKING_CUSTOMER WHERE USERNAME = USER_NAME) LOOP
        DELETE_USER(USERID.CUSTOMER_ID);
    END LOOP;
END;
/

EXEC DELETE_USER(3);
    --DELETE ACCOUNT
CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT(
    ACCOUNTID NUMBER)
IS
BEGIN
    DELETE FROM CUSTOMER_ACCOUNT WHERE ACCOUNT_ID = ACCOUNTID;
    DELETE FROM BANKING_ACCOUNT WHERE ACCOUNT_ID = ACCOUNTID;
END;
/
EXEC DELETE_ACCOUNT(100);

    --LOG IN //CHECK PASSWORD
CREATE OR REPLACE PROCEDURE LOG_IN(INCOMING_USERNAME IN VARCHAR2, INCOMING_PASSWORD IN VARCHAR2, OUTPUTS out sys_refcursor)
IS BEGIN
    OPEN OUTPUTS FOR SELECT 
    *
    FROM
        BANKING_CUSTOMER
    WHERE
        USER_NAME = INCOMING_USERNAME AND INCOMING_PASSWORD = BANKING_CUSTOMER.USER_PASSWORD;
END;
/
    --CHANGE PASSWORD
CREATE OR REPLACE PROCEDURE CHANGE_PASSWORD( NEWPASSWORD VARCHAR2, USERNAME VARCHAR2)
    IS BEGIN
    UPDATE BANKING_CUSTOMER SET BANKING_CUSTOMER.USER_PASSWORD = NEWPASSWORD WHERE USERNAME = USER_NAME;
    END;
    /
SELECT * FROM BANKING_CUSTOMER;
EXEC CHANGE_PASSWORD('P4SSWORD', 1);

--WITHDRAW
CREATE OR REPLACE PROCEDURE WITHDRAW_FROM( USER_ACCOUNT_ID NUMBER, WITHDRAWLAMOUNT NUMBER)
IS
BEGIN
    UPDATE BANKING_ACCOUNT SET BANKING_ACCOUNT.BALANCE = BANKING_ACCOUNT.BALANCE-WITHDRAWLAMOUNT WHERE USER_ACCOUNT_ID = BANKING_ACCOUNT.ACCOUNT_ID;
END;
/

    --DEPOSIT
CREATE OR REPLACE PROCEDURE DEPOSIT_CASH(ACOUNTID NUMBER, DEPOSITAMOUNT NUMBER)
IS
BEGIN
    UPDATE BANKING_ACCOUNT SET BANKING_ACCOUNT.BALANCE = BANKING_ACCOUNT.BALANCE+DEPOSITAMOUNT WHERE ACOUNTID = BANKING_ACCOUNT.ACCOUNT_ID;
END;
/

--USERACCOUNTS
CREATE OR REPLACE PROCEDURE GET_USER_ACCOUNTS(USERID IN NUMBER, UACCOUNTS OUT SYS_REFCURSOR)
IS BEGIN
    OPEN UACCOUNTS FOR SELECT
    CUSTOMER_ACCOUNT.ACCOUNT_ID, ACCOUNT_NAME, BALANCE, BANKING_ACCOUNT.INTEREST_RATE
    FROM CUSTOMER_ACCOUNT RIGHT OUTER JOIN BANKING_ACCOUNT ON CUSTOMER_ACCOUNT.ACCOUNT_ID = BANKING_ACCOUNT.ACCOUNT_ID
    WHERE CUSTOMER_ACCOUNT.CUSTOMER_ID = USERID;
END;
/
--TRANSFER CASH

    --HASH PASSWORD --will be used after everything else works
CREATE OR REPLACE FUNCTION GET_CUSTOMER_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/
drop function GET_CUSTOMER_HASH;

--LOGGING
--https://docs.oracle.com/cd/B19306_01/network.102/b14266/cfgaudit.htm#i1007559
--https://docs.oracle.com/cd/E11882_01/server.112/e10575/tdpsg_auditing.htm#TDPSG50000
--triggers are key

    --TRIGGER
    --before ACCOUNT CHANGES
    --LOG A NEW ROW INTO LOG TABLE
    --DATE, OLD BALANCE, ACTION(WITHDRAW/DEPOSIT)
    
    
    --ACCESS LAST FEW TRANSACTIONS FOR A GIVEN USER
        --LIMIT

COMMIT;