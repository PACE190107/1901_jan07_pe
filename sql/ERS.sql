DROP SEQUENCE ERS_EMP_SEQ;
DROP SEQUENCE ERS_REQ_SEQ;
DROP TABLE ERS_REQ;
DROP TABLE ERS_EMP;

COMMIT;

CREATE TABLE ERS_EMP
(
    EMP_ID NUMBER NOT NULL,
    EMP_FNAME VARCHAR (20) NOT NULL,
    EMP_LNAME VARCHAR (20) NOT NULL,
    EMP_ADDR VARCHAR (100) NOT NULL,
    EMP_EMAIL VARCHAR (100) NOT NULL,
    EMP_UNAME VARCHAR (100) NOT NULL,
    EMP_PASS VARCHAR (100) NOT NULL,
    EMP_ISMGR NUMBER DEFAULT 0,
    CONSTRAINT IS_EMP_OR_MGR CHECK ((EMP_ISMGR=0)OR(EMP_ISMGR=1)),
    CONSTRAINT PK_EMP PRIMARY KEY (EMP_ID),
    CONSTRAINT UNQ_EMP UNIQUE (EMP_UNAME)
);
COMMENT ON COLUMN ERS_EMP.EMP_ISMGR IS 'default to 0 for an employee, 1 for a manager';

COMMIT;

CREATE TABLE ERS_REQ
(
    REQ_PENDING NUMBER DEFAULT 0,
    MGR_REVIEWEDBY NUMBER DEFAULT 0,
    REQ_ID NUMBER NOT NULL,
    EMP_SUBMIT NUMBER NOT NULL,
    REQ_VENDOR VARCHAR(100),
    REQ_DESC VARCHAR(100),
    REQ_AMOUNT NUMBER NOT NULL,
    REQ_APPROVED NUMBER DEFAULT 0,
    CONSTRAINT PK_REQ PRIMARY KEY (REQ_ID),
    CONSTRAINT FK1_REQ FOREIGN KEY (EMP_SUBMIT) REFERENCES ERS_EMP (EMP_ID),
    CONSTRAINT FK2_REQ FOREIGN KEY (MGR_REVIEWEDBY) REFERENCES ERS_EMP (EMP_ID),
    CONSTRAINT SUBMIT CHECK ((REQ_PENDING=0)OR(REQ_PENDING=1)),
    CONSTRAINT APPROVE CHECK ((REQ_APPROVED=0)OR(REQ_APPROVED=1))
);
COMMENT ON COLUMN ERS_REQ.MGR_REVIEWEDBY IS 'default to 1 until a manager reviews the request';
COMMENT ON COLUMN ERS_REQ.REQ_PENDING IS '0 is request pending, 1 is request done';
COMMENT ON COLUMN ERS_REQ.REQ_APPROVED IS '0 is request denied, 1 is request approved';
COMMIT;

CREATE SEQUENCE ERS_EMP_SEQ
  START WITH 1
  INCREMENT BY 1;
  
CREATE SEQUENCE ERS_REQ_SEQ
  START WITH 1
  INCREMENT BY 1;
  
CREATE OR REPLACE FUNCTION GET_ERS_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE PROCEDURE RETURN_ERS_HASH(USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2, HASH OUT VARCHAR2)
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  HASH := TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE TRIGGER ERS_EMP_B_INSERT
BEFORE INSERT
ON ERS_EMP
FOR EACH ROW
BEGIN
  IF :NEW.EMP_ID IS NULL THEN
    SELECT ERS_EMP_SEQ.NEXTVAL INTO :NEW.EMP_ID FROM DUAL;
  END IF;
  SELECT GET_ERS_HASH(:NEW.EMP_UNAME,:NEW.EMP_PASS) INTO :NEW.EMP_PASS FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ERS_REQ_B_INSERT
BEFORE INSERT
ON ERS_REQ
FOR EACH ROW
BEGIN
  IF :NEW.REQ_ID IS NULL THEN
    SELECT ERS_REQ_SEQ.NEXTVAL INTO :NEW.REQ_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE PROCEDURE GET_EMP_INFO (EID IN ERS_EMP.EMP_ID%TYPE, EMP_RECORD OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_RECORD FOR
  SELECT EMP_ID, EMP_FNAME, EMP_LNAME, EMP_ADDR, EMP_EMAIL, EMP_UNAME, EMP_PASS
  FROM ERS_EMP
  WHERE EMP_ID = EID AND EMP_ISMGR = 0;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_EMP_INFO (EMP_RECORD OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_RECORD FOR
  SELECT *
  FROM ERS_EMP
  WHERE EMP_ISMGR = 0;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_ERS_EMP(
FNAME VARCHAR2, LNAME VARCHAR2, ADDR VARCHAR2, EMAIL VARCHAR2, UNAME VARCHAR2, PASS VARCHAR2, IS_MGR NUMBER)
AS
BEGIN
  INSERT INTO ERS_EMP VALUES(NULL, FNAME, LNAME, ADDR, EMAIL, UNAME, PASS, IS_MGR);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_ERS_EMP(
EMPID NUMBER, FNAME VARCHAR2, LNAME VARCHAR2, ADDR VARCHAR2, EMAIL VARCHAR2, UNAME VARCHAR2, PASS VARCHAR2)
AS
BEGIN
  UPDATE ERS_EMP
  SET EMP_FNAME = FNAME,
        EMP_LNAME = LNAME,
        EMP_ADDR = ADDR,
        EMP_EMAIL = EMAIL,
        EMP_UNAME = UNAME,
        EMP_PASS = PASS
  WHERE EMP_ID = EMPID;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ERS_EMP(
EMP_ID_DEL IN NUMBER, AFFECTEDROWS OUT NUMBER)
AS
BEGIN
 DELETE FROM ERS_EMP WHERE EMP_ID = EMP_ID_DEL;
 AFFECTEDROWS := SQL%ROWCOUNT;
 COMMIT;
 END;
/

--do a join here to return emp#, emp name, request #, request vendor, request description
CREATE OR REPLACE PROCEDURE GET_REQ_PEND (EID IN ERS_REQ.EMP_SUBMIT%TYPE, EMP_REQ_PEND OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_REQ_PEND FOR
  SELECT REQ_ID, REQ_PENDING
  FROM ERS_REQ
  WHERE EMP_SUBMIT = EID AND REQ_PENDING = 0;
END;
/

--do a join here to return emp#, emp name, request #, request vendor, request description
CREATE OR REPLACE PROCEDURE GET_ALL_REQ_PEND (EMP_REQ_PEND OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_REQ_PEND FOR
  SELECT REQ_ID, EMP_SUBMIT
  FROM ERS_REQ
  WHERE REQ_PENDING = 0;
END;
/

--do a join here to return emp#, emp name, request #, request vendor, request description
CREATE OR REPLACE PROCEDURE GET_REQ_DONE (EID IN ERS_REQ.EMP_SUBMIT%TYPE, EMP_REQ_PEND OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_REQ_PEND FOR
  SELECT REQ_ID, REQ_PENDING
  FROM ERS_REQ
  WHERE EMP_SUBMIT = EID AND REQ_PENDING = 1;
END;
/

--do a join here to return emp#, emp name, request #, request vendor, request description
CREATE OR REPLACE PROCEDURE GET_ALL_REQ_DONE (EMP_REQ_PEND OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN EMP_REQ_PEND FOR
  SELECT *
  FROM ERS_REQ
  WHERE REQ_PENDING = 1;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_NEW_REQ(
EMP_SUB NUMBER, R_VENDOR VARCHAR2, R_DESC VARCHAR2, R_AMT NUMBER)
AS
BEGIN
  INSERT INTO ERS_REQ VALUES(0, 0, NULL, EMP_SUB, R_VENDOR, R_DESC, R_AMT, 0);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQ(
R_ID NUMBER, MRG_REV NUMBER, REQ_APP NUMBER)
AS
BEGIN
  UPDATE ERS_REQ
  SET REQ_PENDING = 1,
        MGR_REVIEWEDBY = MRG_REV, 
        REQ_APPROVED = REQ_APP
  WHERE REQ_ID = R_ID;
  COMMIT;
END;
/

INSERT INTO ERS_EMP VALUES (null, 'Joshua', 'Bjork', '339 34th Avenue East Moline, IL 61244', 'joshuabjork@gmail.com', 'jbjork', 'jbjork', 1);
INSERT INTO ERS_EMP VALUES (null, 'Randy', 'Poffo', '4734 96th Street Seminole, FL 33708', 'madness@gmail.com', 'savage', 'savage', 0);
INSERT INTO ERS_EMP VALUES (null, 'Richard', 'Fliehr', '1896 3rd Avenue Charlotte, NC 28105', 'naitch@gmail.com', 'naitch', 'naitch', 0);
INSERT INTO ERS_EMP VALUES (null, 'Michael', 'Hickenbottom', '6783 75th Avenue San Antonio, TX 78201', 'hbk@gmail.com', 'hbk', 'hbk', 0);
INSERT INTO ERS_EMP VALUES (null, 'Paul', 'Levesque', '645 71st Avenue Stamford, CT  06956', 'trips@gmail.com', 'trips', 'trips', 1);

select * from ers_emp;

INSERT INTO ERS_REQ VALUES (1, 1, null, 2, 'Enterprise', 'Travel expenses', 250, 1);
INSERT INTO ERS_REQ VALUES (1, 1, null, 2, 'Oracle', 'OCP Exam', 250, 1);
INSERT INTO ERS_REQ VALUES (0, 1, null, 2, 'Starbucks', 'Lunch', 10.65, 0);
INSERT INTO ERS_REQ VALUES (1, 1, null, 3, 'UHaul', 'Travel expenses', 250, 1);
INSERT INTO ERS_REQ VALUES (1, 1, null, 3, 'Oracle', 'OCP Exam', 250, 1);
INSERT INTO ERS_REQ VALUES (1, 5, null, 3, 'Panera', 'Client lunch', 145.32, 1);
INSERT INTO ERS_REQ VALUES (1, 1, null, 3, 'Two Guys and a Truck', 'Travel expenses', 250, 1);
INSERT INTO ERS_REQ VALUES (0, 5, null, 3, 'Subway', 'Lunch', 7.98, 0);
INSERT INTO ERS_REQ VALUES (0, 1, null, 3, 'Five Guys', 'Client lunch', 13.24, 0);

select * from ers_req;
select * from ers_emp;


COMMIT;