DROP TABLE BANK_CHECK;
DROP TABLE BANK_SAVE;
DROP SEQUENCE BANK_CUST_SEQ;
DROP SEQUENCE BANK_CHECK_SEQ;
DROP SEQUENCE BANK_SAVE_SEQ;
DROP TABLE BANK_CUST;
COMMIT;

CREATE TABLE BANK_CUST
(
 CUST_ID NUMBER NOT NULL,
 CUST_FIRSTNAME VARCHAR (20) NOT NULL,
 CUST_LASTNAME VARCHAR (20) NOT NULL,
 CUST_USERNAME VARCHAR (100) NOT NULL,
 CUST_PASSWORD VARCHAR (100) NOT NULL,
 CONSTRAINT PK_CUST PRIMARY KEY (CUST_ID),
 CONSTRAINT UNQ_USER UNIQUE (CUST_USERNAME)
);
COMMIT;

CREATE TABLE BANK_CHECK
(
 CUST_ID NUMBER NOT NULL,
 CHECK_ID NUMBER NOT NULL,
 CHECK_AMT NUMBER NOT NULL,
 CONSTRAINT PK_CHECK PRIMARY KEY (CHECK_ID),
 CONSTRAINT FK_CHECK FOREIGN KEY (CUST_ID) REFERENCES BANK_CUST(CUST_ID) ON DELETE CASCADE
);
COMMIT;

CREATE TABLE BANK_SAVE
(
 CUST_ID NUMBER NOT NULL,
 SAVE_ID NUMBER NOT NULL,
 SAVE_AMT NUMBER NOT NULL,
 CONSTRAINT PK_SAVE PRIMARY KEY (SAVE_ID),
 CONSTRAINT FK_SAVE FOREIGN KEY (CUST_ID) REFERENCES BANK_CUST(CUST_ID) ON DELETE CASCADE
);
COMMIT;

CREATE SEQUENCE BANK_CUST_SEQ
  START WITH 1
  INCREMENT BY 1;
  
CREATE SEQUENCE BANK_CHECK_SEQ
 START WITH 1000000
 INCREMENT BY 1;
 
CREATE SEQUENCE BANK_SAVE_SEQ
 START WITH 2000000
 INCREMENT BY 1;
  
CREATE OR REPLACE FUNCTION GET_BANK_CUST_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE PROCEDURE RETURN_BANK_CUST_HASH(USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2, HASH OUT VARCHAR2)
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  HASH := TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE TRIGGER BANK_CUST_B_INSERT
BEFORE INSERT
ON BANK_CUST
FOR EACH ROW
BEGIN
  IF :NEW.CUST_ID IS NULL THEN
    SELECT BANK_CUST_SEQ.NEXTVAL INTO :NEW.CUST_ID FROM DUAL;
  END IF;
  SELECT GET_BANK_CUST_HASH(:NEW.CUST_USERNAME,:NEW.CUST_PASSWORD) INTO :NEW.CUST_PASSWORD FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER BANK_CHECK_B_INSERT
BEFORE INSERT
ON BANK_CHECK
FOR EACH ROW
BEGIN
  IF :NEW.CHECK_ID IS NULL THEN
    SELECT BANK_CHECK_SEQ.NEXTVAL INTO :NEW.CHECK_ID FROM DUAL;
  END IF;
END;
/
  
  
CREATE OR REPLACE TRIGGER BANK_SAVE_B_INSERT
BEFORE INSERT
ON BANK_SAVE
FOR EACH ROW
BEGIN
  IF :NEW.SAVE_ID IS NULL THEN
    SELECT BANK_SAVE_SEQ.NEXTVAL INTO :NEW.SAVE_ID FROM DUAL;
  END IF;
END;
/
  
CREATE OR REPLACE PROCEDURE INSERT_BANK_CUST(
FIRSTNAME VARCHAR2, LASTNAME VARCHAR2, USERNAME VARCHAR2, PASSWORD VARCHAR2)
AS
BEGIN
  INSERT INTO BANK_CUST VALUES(NULL, FIRSTNAME, LASTNAME, USERNAME, PASSWORD);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BANK_CUST(
CUST_ID NUMBER, FIRSTNAME VARCHAR2, LASTNAME VARCHAR2, USERNAME VARCHAR2, PASSWORD VARCHAR2)
AS
BEGIN
  INSERT INTO BANK_CUST VALUES(CUST_ID, FIRSTNAME, LASTNAME, USERNAME, PASSWORD);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BANK_CUST(
CUST_ID_DELETE IN NUMBER, AFFECTEDROWS OUT NUMBER)
AS
BEGIN
 DELETE FROM BANK_CUST WHERE CUST_ID = CUST_ID_DELETE;
 AFFECTEDROWS := SQL%ROWCOUNT;
 COMMIT;
 END;
/

CREATE OR REPLACE PROCEDURE INSERT_BANK_CHECK(
CUST_ID NUMBER, CHECK_ID NUMBER, AMOUNT NUMBER)
AS
BEGIN
  INSERT INTO BANK_CHECK VALUES(CUST_ID, NULL, AMOUNT);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BANK_CHECK(
ACCT_ID NUMBER, AMOUNT NUMBER)
AS
BEGIN
  UPDATE BANK_CHECK
  SET CHECK_AMT = AMOUNT
  WHERE CHECK_ID = ACCT_ID; 
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BANK_CHECK(
CHECK_ID_DELETE IN NUMBER, AFFECTEDROWS OUT NUMBER)
AS
BEGIN
 DELETE FROM BANK_CHECK WHERE CHECK_ID_DELETE = CHECK_ID AND CHECK_AMT = 0;
 AFFECTEDROWS := SQL%ROWCOUNT;
 COMMIT;
 END;
/

CREATE OR REPLACE PROCEDURE INSERT_BANK_SAVE(
CUST_ID NUMBER, SAVE_ID NUMBER, AMOUNT NUMBER)
AS
BEGIN
  INSERT INTO BANK_SAVE VALUES(CUST_ID, NULL, AMOUNT);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BANK_SAVE(
ACCT_ID NUMBER, AMOUNT NUMBER)
AS
BEGIN
  UPDATE BANK_SAVE
  SET SAVE_AMT = AMOUNT
  WHERE SAVE_ID = ACCT_ID; 
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BANK_SAVE(
SAVE_ID_DELETE IN NUMBER, AFFECTEDROWS OUT NUMBER)
AS
BEGIN
 DELETE FROM BANK_SAVE WHERE SAVE_ID_DELETE = SAVE_ID AND SAVE_AMT = 0;
 AFFECTEDROWS := SQL%ROWCOUNT;
 COMMIT;
 END;
/

COMMIT;

INSERT INTO BANK_CUST VALUES (null,'Josh','Bjork','josh','josh');
INSERT INTO BANK_CHECK VALUES (1, null, 700);
INSERT INTO BANK_SAVE VALUES (1, null, 200);
INSERT INTO BANK_CUST VALUES (null,'Richard','Fliehr','naitch','naitch');
INSERT INTO BANK_CHECK VALUES (2, null, 1535.25);
INSERT INTO BANK_CHECK VALUES (2, null, 5.54);
INSERT INTO BANK_CUST VALUES (null,'Randy','Poffo','savage','savage');
INSERT INTO BANK_SAVE VALUES (3, null, 2486.36);
INSERT INTO BANK_SAVE VALUES (3, null, 700);
INSERT INTO BANK_CUST VALUES (null,'Kenta','Kobashi','burning','burning');
INSERT INTO BANK_CHECK VALUES (3, null, 68416.37);
INSERT INTO BANK_CHECK VALUES (3, null, 593.59);
INSERT INTO BANK_SAVE VALUES (3, null, 630);
INSERT INTO BANK_CUST VALUES (null,'Chris','Irvine','jericho','jericho');
INSERT INTO BANK_SAVE VALUES (4, null, 86527.25);
COMMIT;

SELECT * FROM BANK_CUST;
SELECT * FROM BANK_CHECK;
SELECT * FROM BANK_SAVE;