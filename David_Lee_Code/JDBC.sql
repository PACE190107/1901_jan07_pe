--Create all tables
--Creates USER_DETAILS table
  CREATE TABLE "ENGINEER"."USER_DETAILS" 
   (	"USER_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"FIRSTNAME" VARCHAR2(50 BYTE), 
	"LASTNAME" VARCHAR2(50 BYTE), 
	"USERNAME" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"PASS" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	 CONSTRAINT "USER_DETAILS_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "USERNAME" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE TRIGGER "ENGINEER"."ID_INCREMENT" 
BEFORE INSERT ON USER_DETAILS 
FOR EACH ROW
BEGIN
   IF :NEW.USER_ID IS NULL THEN
    SELECT USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
  END IF;
  
  /* SAVE HASH INSTEAD OF PASSWORD */
  SELECT GET_USER_HASH(:NEW.USERNAME,:NEW.PASS) INTO :NEW.PASS FROM DUAL;
END;
/
ALTER TRIGGER "ENGINEER"."ID_INCREMENT" ENABLE;
-----------------------------------------------------------------------
--Creates table USER_ACCOUNTS
CREATE TABLE "ENGINEER"."USER_ACCOUNTS" 
   (	"ACCOUNT_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"U_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"ACCT_TYPE" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"ACCT_BALANCE" NUMBER(20,2) NOT NULL ENABLE, 
	 CONSTRAINT "USER_ACCOUNTS_PK" PRIMARY KEY ("ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "SYS_C003958" FOREIGN KEY ("U_ID")
	  REFERENCES "ENGINEER"."USER_DETAILS" ("USER_ID") ON DELETE CASCADE ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE TRIGGER "ENGINEER"."ACCT_INCREMENT" 
BEFORE INSERT ON USER_ACCOUNTS 
FOR EACH ROW
BEGIN
  IF :NEW.ACCOUNT_ID IS NULL THEN
      SELECT ACCT_SEQ.nextval
      INTO :new.ACCOUNT_ID
      FROM DUAL;
  END IF;
END;
/
ALTER TRIGGER "ENGINEER"."ACCT_INCREMENT" ENABLE;
-----------------------------------------------------------------------

--Procedures
------------------------------------------
--Deletes the account specified
create or replace PROCEDURE DELETE_ACCOUNT 
(
  ACCT_ID IN VARCHAR2 
) AS 
BEGIN
  DELETE FROM USER_ACCOUNTS WHERE ACCT_ID = ACCOUNT_ID;
END DELETE_ACCOUNT;

------------------------------------------
--Deletes the specified user using cascade delete
create or replace PROCEDURE DELETE_USER 
(
  U_ID NUMBER
) AS

BEGIN
  DELETE FROM USER_DETAILS WHERE USER_ID = U_ID;
  
END DELETE_USER;

------------------------------------------
--Inserts a new account based on user ID
create or replace PROCEDURE INSERT_ACCOUNT 
(
  USER_ID NUMBER, 
  ACCT_TYPE VARCHAR2, 
  ACCT_BALANCE DECIMAL
) AS 

BEGIN
  INSERT INTO USER_ACCOUNTS VALUES(NULL,USER_ID,ACCT_TYPE,ACCT_BALANCE);
  COMMIT;
END INSERT_ACCOUNT;

------------------------------------------

--Creates a new user
create or replace PROCEDURE INSERT_USER(
FIRSTNAME VARCHAR2, LASTNAME VARCHAR2, USERNAME VARCHAR2, PASS VARCHAR2)
AS
BEGIN
  INSERT INTO USER_DETAILS VALUES(NULL,FIRSTNAME,LASTNAME,USERNAME,PASS);
  COMMIT;
END;

------------------------------------------

--Transfers between user and account (does not check balance)
create or replace PROCEDURE TRANSFER
(
    AMOUNT IN NUMBER, 
    ACC_ID IN NUMBER
) AS 
BEGIN
  UPDATE USER_ACCOUNTS SET ACCT_BALANCE = (AMOUNT+ACCT_BALANCE) WHERE ACC_ID = ACCOUNT_ID;
END TRANSFER;

------------------------------------------

--Functions
--Encrypts the user password
create or replace FUNCTION GET_USER_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;

------------------------------------------
--Gets the user ID
create or replace FUNCTION GETID 
(
  USER_NAME IN VARCHAR2 
) 
RETURN NUMBER IS U_ID NUMBER;

BEGIN
  SELECT USER_ID INTO U_ID FROM USER_DETAILS WHERE USERNAME=USER_NAME;
  RETURN U_ID;

END GETID;

--Triggers
------------------------------------------
--Sets a account ID when a new account is created
create or replace TRIGGER ACCT_INCREMENT 
BEFORE INSERT ON USER_ACCOUNTS 
FOR EACH ROW
BEGIN
  IF :NEW.ACCOUNT_ID IS NULL THEN
      SELECT ACCT_SEQ.nextval
      INTO :new.ACCOUNT_ID
      FROM DUAL;
  END IF;
END;

------------------------------------------
--Sets a new ID when a user is created
create or replace TRIGGER ID_INCREMENT 
BEFORE INSERT ON USER_DETAILS 
FOR EACH ROW
BEGIN
   IF :NEW.USER_ID IS NULL THEN
    SELECT USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
  END IF;
  
  --SAVE HASH INSTEAD OF PASSWORD
  SELECT GET_USER_HASH(:NEW.USERNAME,:NEW.PASS) INTO :NEW.PASS FROM DUAL;
END;

------------------------------------------
COMMIT;